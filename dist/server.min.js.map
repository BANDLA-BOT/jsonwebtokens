{"version":3,"sources":["server.js"],"names":["express","require","jwt","bcrypt","validate","mongoose","app","cookieParser","use","urlencoded","extended","userSchema","Schema","json","username","String","type","required","min","max","email","unique","password","model","hashedPassword","res","regeneratorRuntime","async","_context","prev","next","awrap","hash","sent","abrupt","timestamps","stop","registerRoute","req","_req$body","user","_context2","body","userModel","findOne","message","t0","t1","t2","t3","t4","t5","t6","create","call","send","end","loginRoute","_req$body2","token","_context3","status","Error","compare","sign","id","expiresIn","cookie","validUser","httpOnly","redirect","homeRoute","post","get","then","console","log","listen"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require(\"express\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst mongoose = require(\"mongoose\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst cookieParser = require(\"cookie-parser\");\r\nconst validate = require(\"./middle/validate.js\");\r\nconst cors = require('cors')\r\n\r\n\r\nconst app = express();\r\napp.use(cors())\r\napp.use(cookieParser());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      min: 6,\r\n      max: 255,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      min: 6,\r\n      unique: true,\r\n      max: 255,\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: true,\r\n      min: 6,\r\n      max: 255,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\nconst userModel = mongoose.model(\"user\", userSchema);\r\n\r\n//hashedpassword\r\nconst hashedPassword = async (password) => {\r\n  const res = await bcrypt.hash(password, 12);\r\n  return res;\r\n};\r\n//middlewares\r\nconst registerRoute = async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n  const validUser = userModel.findOne({ email: email });\r\n  if(!validUser){\r\n      res.json({message:\"User already exist\"})\r\n  }\r\n  const user = await userModel.create({\r\n    username: username,\r\n    email: email,\r\n    password: await hashedPassword(password),\r\n  });\r\n  // console.log(user);\r\n  res.send(user)\r\n  res.end();\r\n};\r\n\r\nconst loginRoute = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    res.status(400);\r\n    throw new Error(\"All fields are mandatory!\");\r\n  }\r\n  const user = await userModel.findOne({ email });\r\n  if (user && (await bcrypt.compare(password, user.password))) {\r\n    const token = jwt.sign(\r\n      {\r\n        user: {\r\n          username: user.username,\r\n          email: user.email,\r\n          id: user.id,\r\n        },\r\n      },\r\n      \"Guruprasad\",\r\n      { expiresIn: \"10000\" }\r\n    );\r\n    res.cookie('token', token, { httpOnly: true })\r\n    res.send({message:\"success\", redirect:'/dashboard'})\r\n    \r\n  } else {\r\n    res.status(401);\r\n    throw new Error(\"Credentials does not match\");\r\n  }\r\n};\r\n\r\nconst homeRoute = (req, res) => {\r\n  res.send(req.user)\r\n};\r\n//Routes\r\napp.post(\"/register\", registerRoute);\r\napp.post(\"/\", loginRoute);\r\napp.get(\"/home\", homeRoute);\r\napp.use('/dashboard', validate)\r\n\r\nmongoose.connect(\"mongodb://localhost:27017/Tokens\").then(() => {\r\n  console.log(\"Connected\");\r\n  app.listen(8000, () => {\r\n    console.log(\"Server running on 8000\");\r\n  });\r\n});\r\n"]}