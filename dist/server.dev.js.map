{"version":3,"sources":["server.js"],"names":["express","require","jwt","mongoose","bcrypt","cookieParser","validate","cors","app","use","json","urlencoded","extended","userSchema","Schema","username","type","String","required","min","max","email","unique","password","timestamps","userModel","model","hashedPassword","hash","res","registerRoute","req","body","validUser","findOne","message","create","user","send","end","loginRoute","status","Error","compare","token","sign","id","expiresIn","cookie","httpOnly","redirect","homeRoute","post","get","connect","then","console","log","listen"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst mongoose = require(\"mongoose\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst cookieParser = require(\"cookie-parser\");\r\nconst validate = require(\"./middle/validate.js\");\r\nconst cors = require('cors')\r\n\r\n\r\nconst app = express();\r\napp.use(cors())\r\napp.use(cookieParser());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      min: 6,\r\n      max: 255,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      min: 6,\r\n      unique: true,\r\n      max: 255,\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: true,\r\n      min: 6,\r\n      max: 255,\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\nconst userModel = mongoose.model(\"user\", userSchema);\r\n\r\n//hashedpassword\r\nconst hashedPassword = async (password) => {\r\n  const res = await bcrypt.hash(password, 12);\r\n  return res;\r\n};\r\n//middlewares\r\nconst registerRoute = async (req, res) => {\r\n  const { username, email, password } = req.body;\r\n  const validUser = userModel.findOne({ email: email });\r\n  if(!validUser){\r\n      res.json({message:\"User already exist\"})\r\n  }\r\n  const user = await userModel.create({\r\n    username: username,\r\n    email: email,\r\n    password: await hashedPassword(password),\r\n  });\r\n  // console.log(user);\r\n  res.send(user)\r\n  res.end();\r\n};\r\n\r\nconst loginRoute = async (req, res) => {\r\n  const { email, password } = req.body;\r\n  if (!email || !password) {\r\n    res.status(400);\r\n    throw new Error(\"All fields are mandatory!\");\r\n  }\r\n  const user = await userModel.findOne({ email });\r\n  if (user && (await bcrypt.compare(password, user.password))) {\r\n    const token = jwt.sign(\r\n      {\r\n        user: {\r\n          username: user.username,\r\n          email: user.email,\r\n          id: user.id,\r\n        },\r\n      },\r\n      \"Guruprasad\",\r\n      { expiresIn: \"10000\" }\r\n    );\r\n    res.cookie('token', token, { httpOnly: true })\r\n    res.send({message:\"success\", redirect:'/dashboard'})\r\n    \r\n  } else {\r\n    res.status(401);\r\n    throw new Error(\"Credentials does not match\");\r\n  }\r\n};\r\n\r\nconst homeRoute = (req, res) => {\r\n  res.send(req.user)\r\n};\r\n//Routes\r\napp.post(\"/register\", registerRoute);\r\napp.post(\"/\", loginRoute);\r\napp.get(\"/home\", homeRoute);\r\napp.use('/dashboard', validate)\r\n\r\nmongoose.connect(\"mongodb://localhost:27017/Tokens\").then(() => {\r\n  console.log(\"Connected\");\r\n  app.listen(8000, () => {\r\n    console.log(\"Server running on 8000\");\r\n  });\r\n});\r\n"],"file":"server.dev.js"}